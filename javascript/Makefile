
jssrc := $(wildcard src/*.ts)

FAUSTWEB  := FaustLibrary.js		# the output javascript library name
DISTDIR   := npm/dist
FAUSTAPI  := src/FaustCompiler.d.ts src/FaustWebAudio.d.ts src/FaustUtilities.d.ts src/FaustGenerator.d.ts src/FaustWAP.d.ts src/Faust2AudioNode.d.ts
FAUSTDIST := $(FAUSTAPI:src/%=$(DISTDIR)/%)
CHECKDIR  := tmp
SRC       := $(shell find src -name "*.ts" | egrep -v ".d.ts")
CHECKOUT  := $(SRC:src/%.ts=$(CHECKDIR)/%.js)
CHECKDIST := $(FAUSTDIST:$(DISTDIR)/%.ts=$(CHECKDIR)/%.js)
FAUSTDIST := $(FAUSTAPI:src/%=$(DISTDIR)/%)


all: 
	make wasm
	make js

help:
	@echo "============================================================"
	@echo "                     Faust Wasm Library"
	@echo "This Makefile is intended to generate the faust wasm library"
	@echo "============================================================"
	@echo "Available targets are:"
	@echo "  all (default) : call the wasm and js targets"
	@echo "  wasm          : compiles the wasm library"
	@echo "  js            : compiles the javascript library"
	@echo "  dist          : build the public library interface"
	@echo
	@echo "Development specific targets:"
	@echo "  check    : check individual ts files compilation, including the dist interface"
	@echo "  cmake    : re-generates the wasm library makefile using cmake"
	@echo "  clean    : remove the files generated by the wasm, js and dist targets"
	@echo
	@echo "Making the current version publicly available:"
	@echo "  publish  : make all + dist"


wasm:
	make -C .. wasmlib
	cp ../lib/libfaust-wasm.* npm/dist
# 	[ -e tests/libfaust-wasm.data ] || (cd tests && ln -s ../npm/dist/libfaust-wasm.data .)
# 	[ -e npm/exemples/libfaust-wasm.data ] || (cd npm/exemples && ln -s ../dist/libfaust-wasm.data .)

js: $(FAUSTWEB)
	cp $(FAUSTWEB) npm/dist

dist: 
	cp $(FAUSTAPI) $(DISTDIR)
	cp $(FAUSTWEB) $(DISTDIR)

$(FAUSTWEB) : $(jssrc)
	tsc --strict --strictNullChecks --alwaysStrict

clean:
	make -C ../faustdir/emcc clean
	rm -f $(FAUSTWEB) $(FAUSTDIST)

cmake:
	make -C .. cmake

test:
	@echo $(CHECKDIST)

###################################################
# check that individual files compile correctly
# check that public interfaces are self contained (no refs to undefined types) 
check: $(CHECKDIR) $(CHECKOUT) $(CHECKDIST)

$(CHECKDIR) :
	mkdir $(CHECKDIR)

###################################################
# rules to compile individual files

TSOPT  := --strict --strictNullChecks --noImplicitAny --strictFunctionTypes --noImplicitThis --alwaysStrict --noImplicitReturns --noFallthroughCasesInSwitch --target ES2015

$(CHECKDIR)/%.d.js: $(DISTDIR)/%.d.ts
	tsc $(TSOPT) -out $@ $< || rm $@

$(CHECKDIR)/%.js: src/%.ts
	tsc $(TSOPT) -out $@ $< || rm $@

/************************************************************************
 ************************************************************************
    FAUST compiler
    Copyright (C) 2003-2020 GRAME, Centre National de Creation Musicale
    ---------------------------------------------------------------------
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 ************************************************************************
 ************************************************************************/

declare namespace Faust {

    type FaustModule = any;

    interface IntVector { size(): number; get(i: number): number; }

    interface FaustWasm {
        cfactory: number;
        data: IntVector;
        json: string;
    }

    /*
        Low level interface to the Faust library.
        Used for internal dev purpose only (not public)
    */

    //export function createLibFaust(engine: FaustModule) {

    interface LibFaust {

        version(): string;

        /**
         * Create a dsp factory from Faust code.
         *
         * @param {string} name - an arbitrary name for the Faust module
         * @param {string} dsp_content - Faust dsp code
         * @param {string} args - the compiler options
         * @param {boolean} internal_memory - tell the compiler to generate static embedded memory or not
         * @returns {FaustWasm} an opaque reference to the factory
         */
        createDSPFactory(name: string, dsp_content: string, args: string, internal_memory: boolean): FaustWasm;

        /**
         * Delete a dsp factory.
         *
         * @param {number} cfactory - the factory C++ internal pointer as a number
        */
        deleteDSPFactory(cfactory: number): void;

        /**
         * Expand Faust code i.e. linearize included libraries.
         *
         * @param {string} name - an arbitrary name for the Faust module
         * @param {string} dsp_content - Faust dsp code
         * @param {string} args - the compiler options
         * @returns {string} return the expanded dsp code
         */
        expandDSP(name: string, dsp_content: string, args: string): string

        /**
         * Generates auxiliary files from Faust code. The output depends on the compiler options.
         *
         * @param {string} name - an arbitrary name for the faust module
         * @param {string} dsp_content - Faust dsp code
         * @param {string} args - the compiler options
         */
        generateAuxFiles(name: string, dsp_content: string, args: string): boolean;

        /**
         * Delete all existing dsp factories.
         */
        deleteAllDSPFactories(): void;

        /**
         * Exception management: gives an error string
         */
        getErrorAfterException(): string;
        /**
         * Exception management: cleanup
         * Should be called after each exception generated by the LibFaust methods.
         */
        cleanupAfterException(): void;

        module(): FaustModule;

        toString(): string;
    }
}
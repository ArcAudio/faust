/************************************************************************
 ************************************************************************
    FAUST compiler
    Copyright (C) 2003-2020 GRAME, Centre National de Creation Musicale
    ---------------------------------------------------------------------
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 ************************************************************************
 ************************************************************************/

///<reference path="libfaust.d.ts"/>

namespace Faust {

    export class LibFaust implements LibFaust {
        private fModule: FaustModule;
        private fEngine: LibFaust;

        constructor(engine: FaustModule) {
            this.fModule = engine;
            this.fEngine = new engine.libFaustWasm();
        }

        version(): string { return this.fEngine.version(); }

        /**
         * Create a dsp factory from faust code
         *
         * @param {string} name_app - an arbitrary name for the faust module
         * @param {string} dsp_content - faust dsp code
         * @param {string} args - the compiler options
         * @param {boolean} internal_memory - tell the compiler to generate static embedded memory or not
         * @returns {WasmModule} an opaque reference to the factory
         */
        createDSPFactory(name_app: string, dsp_content: string, args: string, internal_memory: boolean): WasmModule { return this.fEngine.createDSPFactory(name_app, dsp_content, args, internal_memory); }


        /**
         * Expand faust code i.e. linearize included libraries
         *
         * @param {string} name_app - an arbitrary name for the faust module
         * @param {string} dsp_content - faust dsp code
         * @param {string} args - the compiler options
         * @returns {Expand} contains the expanded dsp code and the corresponding sha key
         */
        expandDSP(name_app: string, dsp_content: string, args: string): Expand { return this.fEngine.expandDSP(name_app, dsp_content, args) };

        /**
         * Generates auxiliary files from faust code. The output depends on the compiler options
         *
         * @param {string} name_app - an arbitrary name for the faust module
         * @param {string} dsp_content - faust dsp code
         * @param {string} args - the compiler options
         */
        generateAuxFiles(name_app: string, dsp_content: string, args: string): boolean { return this.fEngine.generateAuxFiles(name_app, dsp_content, args); }

        /**
         * Delete all existing dsp factories 
         */
        deleteAllDSPFactories() { this.fEngine.deleteAllDSPFactories(); }

        /**
         * Get wasm code from a module
         *
         * @param {WasmModule} module - a module created using createDSPFactory
         * @return {FaustWasm} wasm code as vector of numbers and JSON string
        */
        getWasmModule(module: WasmModule): FaustWasm { return this.fEngine.getWasmModule(module); }

        /**
         * Release a module created using createDSPFactory
         *
         * @param {WasmModule} module - a module created using createDSPFactory
         */
        freeWasmModule(module: WasmModule) { this.fEngine.freeWasmModule(module); }

        /**
         * Exception management: gives an error string
         */
        getErrorAfterException(): string { return this.fEngine.getErrorAfterException(); }

        /**
         * Exception management: cleanup
         * Should be called after each exception generated by the LibFaust methods.
         */
        cleanupAfterException() { this.fEngine.cleanupAfterException(); }

        module(): FaustModule { return this.fModule; }

        toString() { return "LibFaust module: " + this.fModule + " engine: " + this.fEngine; }
    }
}
